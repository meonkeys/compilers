[X] prep
	[X] switch to parser solution code for homework #4 
	[X] get unit tests working
[_] required
	[_] Assignment statements
		[_] init_id → ID OP_ASSIGN relop_expr
			assignment during initialization
			[X] globals
				in RHS of decl → var_decl ?
					decl is type TYPE
					var_decl is type var_decl
			[_] locals
				[_] handle type conversion
		[_] stmt → var_ref OP_ASSIGN relop_expr MK_SEMICOLON
			assignment statement (only used for locals)
		[_] assign_expr → ID OP_ASSIGN relop_expr
			assignment in initializer of "for loop" control expression
	[_] Arithmetic expressions
		[_] plus, minus, multiply, divide
		[_] equality?
		[_] greater-than, less-than?
		[_] unary minus (negation)?
	[_] Control statements
		[_] while
		[_] if-then-else
	[_] Parameterless procedure calls
		[_] current "return from main" (system exit) places "syscall" on same line
			better idea: jump to "exit" label, that's what it is for
	[_] Read and Write function calls 
		[_] read()
		[_] write()
[_] testing ideas
	[_] automated testing of generated assembly code
		[_] matches expected output
		[_] executes in SPIM without throwing errors
[_] required?
	[_] floating point error in emitted assembly
		17.28 in C-- source code becomes 17.280001 in assembly
		because we try to store 17.28 as a floating point number prior to emitting
	[_] should be an error?
		int a = 1.1;
	[_] return 0/1/etc. from main?
		exit syscall is easy, but not sure how to return an int to the OS
			li $v0, 10
			syscall
		first put return value into fp+4?
			from class 19 slides, pg.39 - stack activation record layout
[_] extra credit
	[_] optimizations
		[_] change "callee saves all registers" to something more efficient
			[_] only save registers that must be preserved across fn call
